#! /usr/bin/env python3
"""A JSON protocol client."""

from argparse import ArgumentParser, Namespace
from json import dumps
from logging import DEBUG, INFO, basicConfig
from sys import exit, stderr
from typing import List

from jsonproto import Client


def get_args() -> Namespace:
    """Parses the command line arguments."""

    parser = ArgumentParser(description='JSON protocol testing server')
    parser.add_argument('command', nargs='+', help='the command to run')
    parser.add_argument('-H', '--host', metavar='host', default='127.0.0.1',
                        help='the hostname or address to listen on')
    parser.add_argument('-p', '--port', type=int, metavar='port',
                        default=9000, help='the port to listen on')
    parser.add_argument('-d', '--debug', action='store_true',
                        help='enable debug logging')
    return parser.parse_args()


class RPCClient(Client):
    """A RPC client implemetation."""

    def run(self, args: List[str]) -> int:
        """Runs a command."""
        response = self.communicate(args, chunk_size=8, big_endian=True)

        if response is None:
            return 0

        print(response['stdout'], end='')
        print(response['stderr'], file=stderr, end='')
        return response['returncode']


def main():
    """Runs the client."""

    args = get_args()
    basicConfig(level=DEBUG if args.debug else INFO)

    with RPCClient(args.host, args.port) as client:
        returncode = client.run(args.command)

    exit(returncode)


if __name__ == '__main__':
    main()
